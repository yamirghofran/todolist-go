// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (user_id, title)
VALUES ($1, $2)
RETURNING id, user_id, title, is_completed, created_at, updated_at
`

type CreateProjectParams struct {
	UserID *int32 `json:"user_id"`
	Title  string `json:"title"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.UserID, arg.Title)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE user_id = $1 AND id = $2
`

type DeleteProjectParams struct {
	UserID *int32 `json:"user_id"`
	ID     int32  `json:"id"`
}

func (q *Queries) DeleteProject(ctx context.Context, arg DeleteProjectParams) error {
	_, err := q.db.Exec(ctx, deleteProject, arg.UserID, arg.ID)
	return err
}

const getProjectAndTodosByUserID = `-- name: GetProjectAndTodosByUserID :many
SELECT projects.id, projects.user_id, projects.title, projects.is_completed, projects.created_at, projects.updated_at, todos.id, todos.title, todos.description, todos.is_completed, todos.created_at, todos.updated_at, todos.user_id, todos.project_id
FROM projects
JOIN todos ON todos.project_id = projects.id
WHERE projects.user_id = $1 AND todos.user_id = $1 AND todos.project_id = $2
`

type GetProjectAndTodosByUserIDParams struct {
	UserID    *int32 `json:"user_id"`
	ProjectID *int32 `json:"project_id"`
}

type GetProjectAndTodosByUserIDRow struct {
	Project Project `json:"project"`
	Todo    Todo    `json:"todo"`
}

func (q *Queries) GetProjectAndTodosByUserID(ctx context.Context, arg GetProjectAndTodosByUserIDParams) ([]GetProjectAndTodosByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getProjectAndTodosByUserID, arg.UserID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectAndTodosByUserIDRow
	for rows.Next() {
		var i GetProjectAndTodosByUserIDRow
		if err := rows.Scan(
			&i.Project.ID,
			&i.Project.UserID,
			&i.Project.Title,
			&i.Project.IsCompleted,
			&i.Project.CreatedAt,
			&i.Project.UpdatedAt,
			&i.Todo.ID,
			&i.Todo.Title,
			&i.Todo.Description,
			&i.Todo.IsCompleted,
			&i.Todo.CreatedAt,
			&i.Todo.UpdatedAt,
			&i.Todo.UserID,
			&i.Todo.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, user_id, title, is_completed, created_at, updated_at
FROM projects
WHERE id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, user_id, title, is_completed, created_at, updated_at
FROM projects
ORDER BY created_at DESC
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsAndTodosByUserID = `-- name: GetProjectsAndTodosByUserID :many
SELECT projects.id, projects.user_id, projects.title, projects.is_completed, projects.created_at, projects.updated_at, todos.id, todos.title, todos.description, todos.is_completed, todos.created_at, todos.updated_at, todos.user_id, todos.project_id
FROM projects
JOIN todos ON todos.project_id = projects.id
WHERE projects.user_id = $1 AND todos.user_id = $1
`

type GetProjectsAndTodosByUserIDRow struct {
	Project Project `json:"project"`
	Todo    Todo    `json:"todo"`
}

func (q *Queries) GetProjectsAndTodosByUserID(ctx context.Context, userID *int32) ([]GetProjectsAndTodosByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getProjectsAndTodosByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectsAndTodosByUserIDRow
	for rows.Next() {
		var i GetProjectsAndTodosByUserIDRow
		if err := rows.Scan(
			&i.Project.ID,
			&i.Project.UserID,
			&i.Project.Title,
			&i.Project.IsCompleted,
			&i.Project.CreatedAt,
			&i.Project.UpdatedAt,
			&i.Todo.ID,
			&i.Todo.Title,
			&i.Todo.Description,
			&i.Todo.IsCompleted,
			&i.Todo.CreatedAt,
			&i.Todo.UpdatedAt,
			&i.Todo.UserID,
			&i.Todo.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsByUserID = `-- name: GetProjectsByUserID :many
SELECT id, user_id, title, is_completed, created_at, updated_at
FROM projects
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetProjectsByUserID(ctx context.Context, userID *int32) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjectsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET title = $3, is_completed = $4, updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND id = $2
RETURNING id, user_id, title, is_completed, created_at, updated_at
`

type UpdateProjectParams struct {
	UserID      *int32 `json:"user_id"`
	ID          int32  `json:"id"`
	Title       string `json:"title"`
	IsCompleted *bool  `json:"is_completed"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.UserID,
		arg.ID,
		arg.Title,
		arg.IsCompleted,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
